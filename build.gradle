
group = 'org.xbib.elasticsearch.plugin'
version = '5.0.0.0'

ext {
    pluginName = 'decompound'
    pluginClassname  = 'org.xbib.elasticsearch.plugin.analysis.decompound.AnalysisDecompoundPlugin'
    pluginDescription = 'Decompounder plugin for Elasticsearch'
    user = 'jprante'
    name = 'elasticsearch-analysis-decompound'
    scmUrl = 'https://github.com/' + user + '/' + name
    scmConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    scmDeveloperConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    versions = [
            'elasticsearch' : '5.0.0',
            'log4j': '2.6.2',
            'junit' : '4.12'
    ]
}

println "Host: " + java.net.InetAddress.getLocalHost()
println "Gradle: " + gradle.gradleVersion + " JVM: " + org.gradle.internal.jvm.Jvm.current() + " Groovy: " + GroovySystem.getVersion()
println "Build: group: '${project.group}', name: '${project.name}', version: '${project.version}'"

apply plugin: 'java'
apply plugin: 'maven'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        url "http://xbib.org/repository"
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    providedCompile
    wagon
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    releaseJars {
        extendsFrom runtime
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.elasticsearch'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'org.slf4j'
        exclude group: 'log4j'
    }
}

dependencies {
    compile "org.elasticsearch:elasticsearch:${versions.elasticsearch}"
    testCompile "org.elasticsearch.test:framework:${versions.elasticsearch}"
    testCompile "org.apache.logging.log4j:log4j-core:${versions.log4j}"
    testCompile "net.java.dev.jna:jna:4.2.2"
    releaseJars "${project.group}:${project.name}:${project.version}"
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked,deprecation"
}

test {
    systemProperties['path.home'] = System.getProperty("user.dir")
    testLogging {
        showStandardStreams = false
        exceptionFormat = 'full'
    }
}

task integrationTest(type: Test, dependsOn: ['unpackPlugin']) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = configurations.integrationTestCompile
    classpath += fileTree("plugins/${pluginName}").include('*.jar')
    classpath += sourceSets.integrationTest.output
    // without this trick to remove identical jars from classpath, an Elasticsearch bug whines about a "jar hell"
    classpath -= configurations.releaseJars
    outputs.upToDateWhen { false }
    systemProperty 'path.home', projectDir.absolutePath
    testLogging.showStandardStreams = false
}

integrationTest.mustRunAfter test
check.dependsOn integrationTest

clean {
    delete "plugins"
    delete "data"
    delete "logs"
}

task makePluginDescriptor(type: Copy) {
    from 'src/main/templates'
    into 'build/tmp/plugin'
    expand([
            'descriptor': [
                'name': pluginName,
                'classname': pluginClassname,
                'description': pluginDescription,
                'jvm': true,
                'site': false,
                'isolated': true,
                'version': project.property('version'),
                'javaVersion': project.property('targetCompatibility'),
                'elasticsearchVersion' : versions.elasticsearch
            ]
    ])
}

task buildPluginZip(type: Zip, dependsOn: [':jar', ':makePluginDescriptor']) {
    from configurations.releaseJars
    into "elasticsearch"

    from 'build/tmp/plugin'
    into "elasticsearch"
    classifier = 'plugin'
}

task unpackPlugin(type: Copy, dependsOn: [':buildPluginZip']) {
    delete "plugins"
    from configurations.releaseJars
    from 'build/tmp/plugin'
    into "plugins/${pluginName}"
}


task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    into 'build/tmp/sources'
    classifier 'sources'
}

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    into 'build/tmp'
    classifier 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar, buildPluginZip
}

apply from: 'gradle/publish.gradle'
